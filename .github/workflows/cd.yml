name: CD - Deploy to GCE (SA Key Auth)

on:
  push:
    branches: [ main ]


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}

      - name: Add GCE host to known_hosts
        run: ssh-keyscan -H ${{ secrets.GCE_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Sync code to GCE VM via rsync
        run: |
          /usr/bin/rsync -avz \
            --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='__pycache__/' \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            ./ ${{ secrets.GCE_SSH_USER }}@${{ secrets.GCE_INSTANCE_IP }}:/home/${{ secrets.GCE_SSH_USER }}/app/

      - name: Execute deployment commands on GCE VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: ${{ secrets.GCE_SSH_USER }}
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to the app directory
            export APP_DIR="/home/${{ secrets.GCE_SSH_USER }}/app"
            cd $APP_DIR

            # --- Fix ownership AFTER rsync ---
            echo "Ensuring correct ownership..."
            # Use sudo to change ownership of all files in current dir (.)
            # to the current user (deploy-user)
            sudo chown -R $(id -u):$(id -g) .
            echo "Ownership set."

            # --- Create the .env file from GitHub Secrets ---
            echo "Creating Backend .env file..."
            # Use 'EOF' marker for a block redirection
            cat > backend/.env << EOF
            # This file is auto-generated by GitHub Actions CD workflow
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            # Add other variables as needed
            EOF

            echo "Creating Frontend .env file..."
            # Use 'EOF' marker for a block redirection
            cat > frontend/.env << EOF
            # This file is auto-generated by GitHub Actions CD workflow
            NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
            # Add other variables as needed
            EOF

            # Ensure Docker daemon access
            export DOCKER_HOST=unix:///var/run/docker.sock

            # Pull the latest images defined in docker-compose.yml
            # echo "Pulling latest Docker images..."
            # docker-compose pull

            # Stop, remove old, and start new containers
            echo "Starting Docker Compose services..."
            docker compose up --build -d --remove-orphans

            # Optional: Prune unused Docker images
            echo "Cleaning up unused Docker images..."
            docker image prune -af

            echo "Deployment successful!"